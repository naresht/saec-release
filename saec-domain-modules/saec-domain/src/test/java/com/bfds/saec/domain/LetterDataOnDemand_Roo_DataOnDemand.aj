// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.GroupMailCode;
import com.bfds.saec.domain.Letter;
import com.bfds.saec.domain.LetterDataOnDemand;
import com.bfds.saec.domain.MailObjectAddress;
import com.bfds.saec.domain.reference.LetterStatus;
import com.bfds.saec.domain.reference.MailType;
import com.bfds.saec.domain.reference.RPOType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect LetterDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LetterDataOnDemand: @Component;
    
    private Random LetterDataOnDemand.rnd = new SecureRandom();
    
    private List<Letter> LetterDataOnDemand.data;
    
    public void LetterDataOnDemand.setAddress(Letter obj, int index) {
        MailObjectAddress address = null;
        obj.setAddress(address);
    }
    
    public void LetterDataOnDemand.setAddressResearchSentCount(Letter obj, int index) {
        int addressResearchSentCount = index;
        obj.setAddressResearchSentCount(addressResearchSentCount);
    }
    
    public void LetterDataOnDemand.setAuditable(Letter obj, int index) {
        Boolean auditable = true;
        obj.setAuditable(auditable);
    }
    
    public void LetterDataOnDemand.setComments(Letter obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void LetterDataOnDemand.setCorrespondenceHasAwdObject(Letter obj, int index) {
        Boolean correspondenceHasAwdObject = Boolean.TRUE;
        obj.setCorrespondenceHasAwdObject(correspondenceHasAwdObject);
    }
    
    public void LetterDataOnDemand.setDescription(Letter obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void LetterDataOnDemand.setDstoPrintFileSentFlag(Letter obj, int index) {
        Boolean dstoPrintFileSentFlag = Boolean.TRUE;
        obj.setDstoPrintFileSentFlag(dstoPrintFileSentFlag);
    }
    
    public void LetterDataOnDemand.setGroupMailCode(Letter obj, int index) {
        GroupMailCode groupMailCode = null;
        obj.setGroupMailCode(groupMailCode);
    }
    
    public void LetterDataOnDemand.setInResponseTo(Letter obj, int index) {
        Letter inResponseTo = obj;
        obj.setInResponseTo(inResponseTo);
    }
    
    public void LetterDataOnDemand.setIsSendCountLimit(Letter obj, int index) {
        Boolean isSendCountLimit = false;
        obj.setIsSendCountLimit(isSendCountLimit);
    }
    
    public void LetterDataOnDemand.setLetterCodeString(Letter obj, int index) {
        String letterCodeString = "letterCodeString_" + index;
        obj.setLetterCodeString(letterCodeString);
    }
    
    public void LetterDataOnDemand.setLetterStatus(Letter obj, int index) {
        LetterStatus letterStatus = LetterStatus.class.getEnumConstants()[0];
        obj.setLetterStatus(letterStatus);
    }
    
    public void LetterDataOnDemand.setMailDate(Letter obj, int index) {
        Date mailDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setMailDate(mailDate);
    }
    
    public void LetterDataOnDemand.setMailType(Letter obj, int index) {
        MailType mailType = MailType.class.getEnumConstants()[0];
        obj.setMailType(mailType);
    }
    
    public void LetterDataOnDemand.setMailingControlNo(Letter obj, int index) {
        String mailingControlNo = "mailingControlNo_" + index;
        obj.setMailingControlNo(mailingControlNo);
    }
    
    public void LetterDataOnDemand.setRequestType(Letter obj, int index) {
        String requestType = "requestType_" + index;
        obj.setRequestType(requestType);
    }
    
    public void LetterDataOnDemand.setRpoDate(Letter obj, int index) {
        Date rpoDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRpoDate(rpoDate);
    }
    
    public void LetterDataOnDemand.setRpoForwardableReissueRequired(Letter obj, int index) {
        Boolean rpoForwardableReissueRequired = true;
        obj.setRpoForwardableReissueRequired(rpoForwardableReissueRequired);
    }
    
    public void LetterDataOnDemand.setRpoType(Letter obj, int index) {
        RPOType rpoType = RPOType.class.getEnumConstants()[0];
        obj.setRpoType(rpoType);
    }
    
    public void LetterDataOnDemand.setSpecialPull(Letter obj, int index) {
        Boolean specialPull = true;
        obj.setSpecialPull(specialPull);
    }
    
    public void LetterDataOnDemand.setUserId(Letter obj, int index) {
        String userId = "userId_" + index;
        obj.setUserId(userId);
    }
    
    public Letter LetterDataOnDemand.getSpecificLetter(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Letter obj = data.get(index);
        Long id = obj.getId();
        return Letter.findLetter(id);
    }
    
    public Letter LetterDataOnDemand.getRandomLetter() {
        init();
        Letter obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Letter.findLetter(id);
    }
    
    public boolean LetterDataOnDemand.modifyLetter(Letter obj) {
        return false;
    }
    
    public void LetterDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Letter.findLetterEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Letter' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Letter>();
        for (int i = 0; i < 10; i++) {
            Letter obj = getNewTransientLetter(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
