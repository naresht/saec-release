// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.Claimant;
import com.bfds.saec.domain.Payment;
import com.bfds.saec.domain.reference.PaymentCode;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Payment_Roo_Finder {
    
    public static TypedQuery<Payment> Payment.findPaymentsByMailingControlNo(String mailingControlNo) {
        if (mailingControlNo == null || mailingControlNo.length() == 0) throw new IllegalArgumentException("The mailingControlNo argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.mailingControlNo = :mailingControlNo", Payment.class);
        q.setParameter("mailingControlNo", mailingControlNo);
        return q;
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByPayTo(Claimant payTo) {
        if (payTo == null) throw new IllegalArgumentException("The payTo argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.payTo = :payTo", Payment.class);
        q.setParameter("payTo", payTo);
        return q;
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByPaymentCodeAndPayTo(PaymentCode paymentCode, Claimant payTo) {
        if (paymentCode == null) throw new IllegalArgumentException("The paymentCode argument is required");
        if (payTo == null) throw new IllegalArgumentException("The payTo argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.paymentCode = :paymentCode AND o.payTo = :payTo", Payment.class);
        q.setParameter("paymentCode", paymentCode);
        q.setParameter("payTo", payTo);
        return q;
    }
    
}
