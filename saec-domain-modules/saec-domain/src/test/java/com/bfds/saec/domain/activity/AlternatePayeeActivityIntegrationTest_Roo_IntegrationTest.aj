// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain.activity;

import com.bfds.saec.domain.activity.AlternatePayeeActivity;
import com.bfds.saec.domain.activity.AlternatePayeeActivityDataOnDemand;
import com.bfds.saec.domain.activity.AlternatePayeeActivityIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AlternatePayeeActivityIntegrationTest_Roo_IntegrationTest {
    
    declare @type: AlternatePayeeActivityIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: AlternatePayeeActivityIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: AlternatePayeeActivityIntegrationTest: @Transactional;
    
    @Autowired
    private AlternatePayeeActivityDataOnDemand AlternatePayeeActivityIntegrationTest.dod;
    
    @Test
    public void AlternatePayeeActivityIntegrationTest.testCountAlternatePayeeActivitys() {
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to initialize correctly", dod.getRandomAlternatePayeeActivity());
        long count = AlternatePayeeActivity.countAlternatePayeeActivitys();
        Assert.assertTrue("Counter for 'AlternatePayeeActivity' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void AlternatePayeeActivityIntegrationTest.testFindAlternatePayeeActivity() {
        AlternatePayeeActivity obj = dod.getRandomAlternatePayeeActivity();
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to provide an identifier", id);
        obj = AlternatePayeeActivity.findAlternatePayeeActivity(id);
        Assert.assertNotNull("Find method for 'AlternatePayeeActivity' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'AlternatePayeeActivity' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void AlternatePayeeActivityIntegrationTest.testFindAllAlternatePayeeActivitys() {
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to initialize correctly", dod.getRandomAlternatePayeeActivity());
        long count = AlternatePayeeActivity.countAlternatePayeeActivitys();
        Assert.assertTrue("Too expensive to perform a find all test for 'AlternatePayeeActivity', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<AlternatePayeeActivity> result = AlternatePayeeActivity.findAllAlternatePayeeActivitys();
        Assert.assertNotNull("Find all method for 'AlternatePayeeActivity' illegally returned null", result);
        Assert.assertTrue("Find all method for 'AlternatePayeeActivity' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void AlternatePayeeActivityIntegrationTest.testFindAlternatePayeeActivityEntries() {
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to initialize correctly", dod.getRandomAlternatePayeeActivity());
        long count = AlternatePayeeActivity.countAlternatePayeeActivitys();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<AlternatePayeeActivity> result = AlternatePayeeActivity.findAlternatePayeeActivityEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'AlternatePayeeActivity' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'AlternatePayeeActivity' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void AlternatePayeeActivityIntegrationTest.testFlush() {
        AlternatePayeeActivity obj = dod.getRandomAlternatePayeeActivity();
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to provide an identifier", id);
        obj = AlternatePayeeActivity.findAlternatePayeeActivity(id);
        Assert.assertNotNull("Find method for 'AlternatePayeeActivity' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyAlternatePayeeActivity(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'AlternatePayeeActivity' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void AlternatePayeeActivityIntegrationTest.testMergeUpdate() {
        AlternatePayeeActivity obj = dod.getRandomAlternatePayeeActivity();
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to provide an identifier", id);
        obj = AlternatePayeeActivity.findAlternatePayeeActivity(id);
        boolean modified =  dod.modifyAlternatePayeeActivity(obj);
        Integer currentVersion = obj.getVersion();
        AlternatePayeeActivity merged = (AlternatePayeeActivity)obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'AlternatePayeeActivity' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void AlternatePayeeActivityIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to initialize correctly", dod.getRandomAlternatePayeeActivity());
        AlternatePayeeActivity obj = dod.getNewTransientAlternatePayeeActivity(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'AlternatePayeeActivity' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'AlternatePayeeActivity' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'AlternatePayeeActivity' identifier to no longer be null", obj.getId());
    }
    
}
