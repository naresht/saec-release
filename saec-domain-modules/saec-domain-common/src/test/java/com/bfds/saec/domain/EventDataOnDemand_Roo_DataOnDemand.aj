// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.Event;
import com.bfds.saec.domain.EventDataOnDemand;
import com.bfds.saec.domain.SmallCheckConfig;
import com.bfds.saec.domain.reference.AccountType;
import com.bfds.saec.domain.reference.RpoEligibleOption;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EventDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EventDataOnDemand: @Component;
    
    private Random EventDataOnDemand.rnd = new SecureRandom();
    
    private List<Event> EventDataOnDemand.data;
    
    public Event EventDataOnDemand.getNewTransientEvent(int index) {
        Event obj = new Event();
        setAccountType(obj, index);
        setAddressResearch(obj, index);
        setBank(obj, index);
        setBankABANumber(obj, index);
        setBankCode(obj, index);
        setBankInterest(obj, index);
        setCanChangeStausOfStaleCheck(obj, index);
        setCheckNameforBottomlineOutFile(obj, index);
        setCheckStaleByDate(obj, index);
        setCheckStaleInDays(obj, index);
        setCheckStartingNo(obj, index);
        setClaimCuttOff(obj, index);
        setClosedDate(obj, index);
        setClosedEvent(obj, index);
        setCode(obj, index);
        setComments(obj, index);
        setCorrespondenceThresholdLimit(obj, index);
        setCureLetterLimit(obj, index);
        setCureLetterLimitNumber(obj, index);
        setCureLetterRangeEnd(obj, index);
        setCureLetterRangeStart(obj, index);
        setDda(obj, index);
        setDescription(obj, index);
        setDeutscheBankUserId(obj, index);
        setEventThreshold(obj, index);
        setEventType(obj, index);
        setForeignAccountSolicitation(obj, index);
        setHideReminders(obj, index);
        setInfoAgeReviewMailDistributionList(obj, index);
        setIssuingBankCode(obj, index);
        setLibraryId(obj, index);
        setMailDistributionList(obj, index);
        setMailSendCountLimit(obj, index);
        setMailingControlSequence(obj, index);
        setName(obj, index);
        setNotificationEmailTo(obj, index);
        setOmnibusOutreach(obj, index);
        setPaymentSendCountLimit(obj, index);
        setPreScrub(obj, index);
        setRequiresAddressPrescrub(obj, index);
        setRequiresTaxInfo(obj, index);
        setRpoEligible(obj, index);
        setSaecIssueId(obj, index);
        setSendCountLimit(obj, index);
        setSmallCheckConfig(obj, index);
        setStartDate(obj, index);
        setTargetEndDate(obj, index);
        setTaxAdministrator(obj, index);
        setTaxTypePrimary(obj, index);
        setTaxTypeSecondary(obj, index);
        setTaxVendor(obj, index);
        setTaxableDistribution(obj, index);
        setTaxableThreshold(obj, index);
        setUseBottomLineForCheckNoAssignment(obj, index);
        return obj;
    }
    
    public void EventDataOnDemand.setAccountType(Event obj, int index) {
        AccountType accountType = null;
        obj.setAccountType(accountType);
    }
    
    public void EventDataOnDemand.setAddressResearch(Event obj, int index) {
        Boolean addressResearch = Boolean.TRUE;
        obj.setAddressResearch(addressResearch);
    }
    
    public void EventDataOnDemand.setBankABANumber(Event obj, int index) {
        int bankABANumber = index;
        obj.setBankABANumber(bankABANumber);
    }
    
    public void EventDataOnDemand.setBankCode(Event obj, int index) {
        String bankCode = "bankCode_" + index;
        obj.setBankCode(bankCode);
    }
    
    public void EventDataOnDemand.setBankInterest(Event obj, int index) {
        BigDecimal bankInterest = BigDecimal.valueOf(index);
        obj.setBankInterest(bankInterest);
    }
    
    public void EventDataOnDemand.setCanChangeStausOfStaleCheck(Event obj, int index) {
        Boolean canChangeStausOfStaleCheck = true;
        obj.setCanChangeStausOfStaleCheck(canChangeStausOfStaleCheck);
    }
    
    public void EventDataOnDemand.setCheckNameforBottomlineOutFile(Event obj, int index) {
        String checkNameforBottomlineOutFile = "checkNameforBottomlineOutFile_" + index;
        obj.setCheckNameforBottomlineOutFile(checkNameforBottomlineOutFile);
    }
    
    public void EventDataOnDemand.setCheckStaleByDate(Event obj, int index) {
        Date checkStaleByDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCheckStaleByDate(checkStaleByDate);
    }
    
    public void EventDataOnDemand.setCheckStaleInDays(Event obj, int index) {
        int checkStaleInDays = index;
        obj.setCheckStaleInDays(checkStaleInDays);
    }
    
    public void EventDataOnDemand.setCheckStartingNo(Event obj, int index) {
        Long checkStartingNo = new Integer(index).longValue();
        obj.setCheckStartingNo(checkStartingNo);
    }
    
    public void EventDataOnDemand.setClaimCuttOff(Event obj, int index) {
        Boolean claimCuttOff = Boolean.TRUE;
        obj.setClaimCuttOff(claimCuttOff);
    }
    
    public void EventDataOnDemand.setClosedDate(Event obj, int index) {
        Date closedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setClosedDate(closedDate);
    }
    
    public void EventDataOnDemand.setClosedEvent(Event obj, int index) {
        Boolean closedEvent = Boolean.TRUE;
        obj.setClosedEvent(closedEvent);
    }
    
    public void EventDataOnDemand.setCode(Event obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void EventDataOnDemand.setComments(Event obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void EventDataOnDemand.setCorrespondenceThresholdLimit(Event obj, int index) {
        double correspondenceThresholdLimit = new Integer(index).doubleValue();
        obj.setCorrespondenceThresholdLimit(correspondenceThresholdLimit);
    }
    
    public void EventDataOnDemand.setCureLetterLimit(Event obj, int index) {
        Boolean cureLetterLimit = Boolean.TRUE;
        obj.setCureLetterLimit(cureLetterLimit);
    }
    
    public void EventDataOnDemand.setCureLetterLimitNumber(Event obj, int index) {
        int cureLetterLimitNumber = index;
        obj.setCureLetterLimitNumber(cureLetterLimitNumber);
    }
    
    public void EventDataOnDemand.setCureLetterRangeEnd(Event obj, int index) {
        int cureLetterRangeEnd = index;
        obj.setCureLetterRangeEnd(cureLetterRangeEnd);
    }
    
    public void EventDataOnDemand.setCureLetterRangeStart(Event obj, int index) {
        int cureLetterRangeStart = index;
        obj.setCureLetterRangeStart(cureLetterRangeStart);
    }
    
    public void EventDataOnDemand.setDda(Event obj, int index) {
        String dda = "dda_" + index;
        obj.setDda(dda);
    }
    
    public void EventDataOnDemand.setDescription(Event obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void EventDataOnDemand.setDeutscheBankUserId(Event obj, int index) {
        String deutscheBankUserId = "deutscheBankUserId_" + index;
        obj.setDeutscheBankUserId(deutscheBankUserId);
    }
    
    public void EventDataOnDemand.setEventThreshold(Event obj, int index) {
        BigDecimal eventThreshold = BigDecimal.valueOf(index);
        obj.setEventThreshold(eventThreshold);
    }
    
    public void EventDataOnDemand.setEventType(Event obj, int index) {
        String eventType = "eventType_" + index;
        obj.setEventType(eventType);
    }
    
    public void EventDataOnDemand.setForeignAccountSolicitation(Event obj, int index) {
        Boolean foreignAccountSolicitation = Boolean.TRUE;
        obj.setForeignAccountSolicitation(foreignAccountSolicitation);
    }
    
    public void EventDataOnDemand.setHideReminders(Event obj, int index) {
        Boolean hideReminders = Boolean.TRUE;
        obj.setHideReminders(hideReminders);
    }
    
    public void EventDataOnDemand.setInfoAgeReviewMailDistributionList(Event obj, int index) {
        String infoAgeReviewMailDistributionList = "infoAgeReviewMailDistributionList_" + index;
        obj.setInfoAgeReviewMailDistributionList(infoAgeReviewMailDistributionList);
    }
    
    public void EventDataOnDemand.setIssuingBankCode(Event obj, int index) {
        String issuingBankCode = "issuingBankCode_" + index;
        obj.setIssuingBankCode(issuingBankCode);
    }
    
    public void EventDataOnDemand.setLibraryId(Event obj, int index) {
        String libraryId = "libraryId_" + index;
        obj.setLibraryId(libraryId);
    }
    
    public void EventDataOnDemand.setMailDistributionList(Event obj, int index) {
        String mailDistributionList = "mailDistributionList_" + index;
        obj.setMailDistributionList(mailDistributionList);
    }
    
    public void EventDataOnDemand.setMailSendCountLimit(Event obj, int index) {
        int mailSendCountLimit = index;
        obj.setMailSendCountLimit(mailSendCountLimit);
    }
    
    public void EventDataOnDemand.setMailingControlSequence(Event obj, int index) {
        Long mailingControlSequence = new Integer(index).longValue();
        obj.setMailingControlSequence(mailingControlSequence);
    }
    
    public void EventDataOnDemand.setName(Event obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void EventDataOnDemand.setNotificationEmailTo(Event obj, int index) {
        String notificationEmailTo = "foo" + index + "@bar.com";
        obj.setNotificationEmailTo(notificationEmailTo);
    }
    
    public void EventDataOnDemand.setOmnibusOutreach(Event obj, int index) {
        Boolean omnibusOutreach = Boolean.TRUE;
        obj.setOmnibusOutreach(omnibusOutreach);
    }
    
    public void EventDataOnDemand.setPaymentSendCountLimit(Event obj, int index) {
        int paymentSendCountLimit = index;
        obj.setPaymentSendCountLimit(paymentSendCountLimit);
    }
    
    public void EventDataOnDemand.setPreScrub(Event obj, int index) {
        Boolean preScrub = Boolean.TRUE;
        obj.setPreScrub(preScrub);
    }
    
    public void EventDataOnDemand.setRequiresAddressPrescrub(Event obj, int index) {
        Boolean requiresAddressPrescrub = true;
        obj.setRequiresAddressPrescrub(requiresAddressPrescrub);
    }
    
    public void EventDataOnDemand.setRequiresTaxInfo(Event obj, int index) {
        Boolean requiresTaxInfo = Boolean.TRUE;
        obj.setRequiresTaxInfo(requiresTaxInfo);
    }
    
    public void EventDataOnDemand.setRpoEligible(Event obj, int index) {
        RpoEligibleOption rpoEligible = null;
        obj.setRpoEligible(rpoEligible);
    }
    
    public void EventDataOnDemand.setSaecIssueId(Event obj, int index) {
        String saecIssueId = "saecIssueId_" + index;
        obj.setSaecIssueId(saecIssueId);
    }
    
    public void EventDataOnDemand.setSendCountLimit(Event obj, int index) {
        Boolean sendCountLimit = Boolean.TRUE;
        obj.setSendCountLimit(sendCountLimit);
    }
    
    public void EventDataOnDemand.setSmallCheckConfig(Event obj, int index) {
        SmallCheckConfig smallCheckConfig = null;
        obj.setSmallCheckConfig(smallCheckConfig);
    }
    
    public void EventDataOnDemand.setStartDate(Event obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void EventDataOnDemand.setTargetEndDate(Event obj, int index) {
        Date targetEndDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTargetEndDate(targetEndDate);
    }
    
    public void EventDataOnDemand.setTaxAdministrator(Event obj, int index) {
        Boolean taxAdministrator = Boolean.TRUE;
        obj.setTaxAdministrator(taxAdministrator);
    }
    
    public void EventDataOnDemand.setTaxTypePrimary(Event obj, int index) {
        String taxTypePrimary = "taxTypePrimary_" + index;
        obj.setTaxTypePrimary(taxTypePrimary);
    }
    
    public void EventDataOnDemand.setTaxTypeSecondary(Event obj, int index) {
        String taxTypeSecondary = "taxTypeSecondary_" + index;
        obj.setTaxTypeSecondary(taxTypeSecondary);
    }
    
    public void EventDataOnDemand.setTaxVendor(Event obj, int index) {
        String taxVendor = "taxVendor_" + index;
        obj.setTaxVendor(taxVendor);
    }
    
    public void EventDataOnDemand.setTaxableDistribution(Event obj, int index) {
        Boolean taxableDistribution = Boolean.TRUE;
        obj.setTaxableDistribution(taxableDistribution);
    }
    
    public void EventDataOnDemand.setTaxableThreshold(Event obj, int index) {
        int taxableThreshold = index;
        obj.setTaxableThreshold(taxableThreshold);
    }
    
    public void EventDataOnDemand.setUseBottomLineForCheckNoAssignment(Event obj, int index) {
        Boolean useBottomLineForCheckNoAssignment = Boolean.TRUE;
        obj.setUseBottomLineForCheckNoAssignment(useBottomLineForCheckNoAssignment);
    }
    
    public Event EventDataOnDemand.getSpecificEvent(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Event obj = data.get(index);
        Long id = obj.getId();
        return Event.findEvent(id);
    }
    
    public Event EventDataOnDemand.getRandomEvent() {
        init();
        Event obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Event.findEvent(id);
    }
    
    public boolean EventDataOnDemand.modifyEvent(Event obj) {
        return false;
    }
    
    public void EventDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Event.findEventEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Event' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Event>();
        for (int i = 0; i < 10; i++) {
            Event obj = getNewTransientEvent(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
