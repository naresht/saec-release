// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.Bank;
import com.bfds.saec.domain.GroupMailCode;
import com.bfds.saec.domain.Payment;
import com.bfds.saec.domain.PaymentDataOnDemand;
import com.bfds.saec.domain.Tranch;
import com.bfds.saec.domain.WireInfo;
import com.bfds.saec.domain.WireOriginationInfo;
import com.bfds.saec.domain.reference.PaymentCode;
import com.bfds.saec.domain.reference.PaymentStatus;
import com.bfds.saec.domain.reference.PaymentType;
import com.bfds.saec.domain.reference.RPOType;
import com.bfds.saec.rip.service.RipEventListener;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PaymentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PaymentDataOnDemand: @Component;
    
    private Random PaymentDataOnDemand.rnd = new SecureRandom();
    
    private List<Payment> PaymentDataOnDemand.data;
    
    public void PaymentDataOnDemand.setWireInfoReceivingBank(WireInfo obj, int index) {
        Bank receivingBank = null;
        obj.setReceivingBank(receivingBank);
    }
    
    public void PaymentDataOnDemand.setWireInfoAuthorizedApprover(WireInfo obj, int index) {
        String authorizedApprover = "authorizedApprover_" + index;
        obj.setAuthorizedApprover(authorizedApprover);
    }
    
    public void PaymentDataOnDemand.setWireInfoAuthorizedTitle(WireInfo obj, int index) {
        String authorizedTitle = "authorizedTitle_" + index;
        obj.setAuthorizedTitle(authorizedTitle);
    }
    
    public void PaymentDataOnDemand.setWireInfoAuthorizedDate(WireInfo obj, int index) {
        Date authorizedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAuthorizedDate(authorizedDate);
    }
    
    public void PaymentDataOnDemand.setWireInfoOriginationInfo(WireInfo obj, int index) {
        WireOriginationInfo originationInfo = null;
        obj.setOriginationInfo(originationInfo);
    }
    
    public void PaymentDataOnDemand.setAuditable(Payment obj, int index) {
        Boolean auditable = true;
        obj.setAuditable(auditable);
    }
    
    public void PaymentDataOnDemand.setComments(Payment obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void PaymentDataOnDemand.setDstoCheckFileSentFlag(Payment obj, int index) {
        Boolean dstoCheckFileSentFlag = Boolean.TRUE;
        obj.setDstoCheckFileSentFlag(dstoCheckFileSentFlag);
    }
    
    public void PaymentDataOnDemand.setDstoPrintFileSentFlag(Payment obj, int index) {
        Boolean dstoPrintFileSentFlag = Boolean.TRUE;
        obj.setDstoPrintFileSentFlag(dstoPrintFileSentFlag);
    }
    
    public void PaymentDataOnDemand.setGroupMailCode(Payment obj, int index) {
        GroupMailCode groupMailCode = null;
        obj.setGroupMailCode(groupMailCode);
    }
    
    public void PaymentDataOnDemand.setHasBeenSplit(Payment obj, int index) {
        Boolean hasBeenSplit = Boolean.TRUE;
        obj.setHasBeenSplit(hasBeenSplit);
    }
    
    public void PaymentDataOnDemand.setIdentificatonNo(Payment obj, int index) {
        String identificatonNo = "identificatonNo_" + index;
        obj.setIdentificatonNo(identificatonNo);
    }
    
    public void PaymentDataOnDemand.setIfdsSent(Payment obj, int index) {
        Boolean ifdsSent = Boolean.TRUE;
        obj.setIfdsSent(ifdsSent);
    }
    
    public void PaymentDataOnDemand.setIsSendCountLimit(Payment obj, int index) {
        Boolean isSendCountLimit = false;
        obj.setIsSendCountLimit(isSendCountLimit);
    }
    
    public void PaymentDataOnDemand.setItemSequenceNumber(Payment obj, int index) {
        String itemSequenceNumber = "itemSequenceNumber_" + index;
        obj.setItemSequenceNumber(itemSequenceNumber);
    }
    
    public void PaymentDataOnDemand.setMailingControlNo(Payment obj, int index) {
        String mailingControlNo = "mailingControlNo_" + index;
        obj.setMailingControlNo(mailingControlNo);
    }
    
    public void PaymentDataOnDemand.setPaymentCode(Payment obj, int index) {
        PaymentCode paymentCode = PaymentCode.class.getEnumConstants()[0];
        obj.setPaymentCode(paymentCode);
    }
    
    public void PaymentDataOnDemand.setPaymentDate(Payment obj, int index) {
        Date paymentDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setPaymentDate(paymentDate);
    }
    
    public void PaymentDataOnDemand.setPaymentRpoFlag(Payment obj, int index) {
        Boolean paymentRpoFlag = true;
        obj.setPaymentRpoFlag(paymentRpoFlag);
    }
    
    public void PaymentDataOnDemand.setPaymentType(Payment obj, int index) {
        PaymentType paymentType = PaymentType.class.getEnumConstants()[0];
        obj.setPaymentType(paymentType);
    }
    
    public void PaymentDataOnDemand.setPriorRofAmount(Payment obj, int index) {
        double priorRofAmount = new Integer(index).doubleValue();
        obj.setPriorRofAmount(priorRofAmount);
    }
    
    public void PaymentDataOnDemand.setReissueOf(Payment obj, int index) {
        Payment reissueOf = obj;
        obj.setReissueOf(reissueOf);
    }
    
    public void PaymentDataOnDemand.setReleaseRejectResponseCode(Payment obj, int index) {
        String releaseRejectResponseCode = "releaseRejectResponseCode_" + index;
        obj.setReleaseRejectResponseCode(releaseRejectResponseCode);
    }
    
    public void PaymentDataOnDemand.setRipEventListener(Payment obj, int index) {
        RipEventListener ripEventListener = null;
        obj.setRipEventListener(ripEventListener);
    }
    
    public void PaymentDataOnDemand.setRofHasResidualMonies(Payment obj, int index) {
        Boolean rofHasResidualMonies = true;
        obj.setRofHasResidualMonies(rofHasResidualMonies);
    }
    
    public void PaymentDataOnDemand.setRofOf(Payment obj, int index) {
        Payment rofOf = obj;
        obj.setRofOf(rofOf);
    }
    
    public void PaymentDataOnDemand.setRpoDate(Payment obj, int index) {
        Date rpoDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRpoDate(rpoDate);
    }
    
    public void PaymentDataOnDemand.setRpoType(Payment obj, int index) {
        RPOType rpoType = RPOType.class.getEnumConstants()[0];
        obj.setRpoType(rpoType);
    }
    
    public void PaymentDataOnDemand.setSentOnBankIssueVoidFile(Payment obj, int index) {
        Boolean sentOnBankIssueVoidFile = Boolean.TRUE;
        obj.setSentOnBankIssueVoidFile(sentOnBankIssueVoidFile);
    }
    
    public void PaymentDataOnDemand.setSentOnBankStopFile(Payment obj, int index) {
        Boolean sentOnBankStopFile = Boolean.TRUE;
        obj.setSentOnBankStopFile(sentOnBankStopFile);
    }
    
    public void PaymentDataOnDemand.setSentOnBottomLineFile(Payment obj, int index) {
        Boolean sentOnBottomLineFile = Boolean.TRUE;
        obj.setSentOnBottomLineFile(sentOnBottomLineFile);
    }
    
    public void PaymentDataOnDemand.setSentOnTaxFile(Payment obj, int index) {
        Boolean sentOnTaxFile = Boolean.TRUE;
        obj.setSentOnTaxFile(sentOnTaxFile);
    }
    
    public void PaymentDataOnDemand.setSpecialPullCode(Payment obj, int index) {
        String specialPullCode = "specialPullCode_" + index;
        obj.setSpecialPullCode(specialPullCode);
    }
    
    public void PaymentDataOnDemand.setSplitOf(Payment obj, int index) {
        Payment splitOf = obj;
        obj.setSplitOf(splitOf);
    }
    
    public void PaymentDataOnDemand.setStaleByDate(Payment obj, int index) {
        Date staleByDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStaleByDate(staleByDate);
    }
    
    public void PaymentDataOnDemand.setStaleDated(Payment obj, int index) {
        Boolean staleDated = Boolean.TRUE;
        obj.setStaleDated(staleDated);
    }
    
    public void PaymentDataOnDemand.setStatusChangeDate(Payment obj, int index) {
        Date statusChangeDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStatusChangeDate(statusChangeDate);
    }
    
    public void PaymentDataOnDemand.setTranch(Payment obj, int index) {
        Tranch tranch = null;
        obj.setTranch(tranch);
    }
    
    public void PaymentDataOnDemand.setUserId(Payment obj, int index) {
        String userId = "userId_" + index;
        obj.setUserId(userId);
    }
    
    public Payment PaymentDataOnDemand.getSpecificPayment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Payment obj = data.get(index);
        Long id = obj.getId();
        return Payment.findPayment(id);
    }
    
    public Payment PaymentDataOnDemand.getRandomPayment() {
        init();
        Payment obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Payment.findPayment(id);
    }
    
    public boolean PaymentDataOnDemand.modifyPayment(Payment obj) {
        return false;
    }
    
    public void PaymentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Payment.findPaymentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Payment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Payment>();
        for (int i = 0; i < 10; i++) {
            Payment obj = getNewTransientPayment(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
