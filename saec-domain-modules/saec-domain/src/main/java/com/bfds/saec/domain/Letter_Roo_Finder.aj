// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.Claimant;
import com.bfds.saec.domain.Letter;
import com.bfds.saec.domain.reference.RPOType;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Letter_Roo_Finder {
    
    public static TypedQuery<Letter> Letter.findLettersByMailingControlNo(String mailingControlNo) {
        if (mailingControlNo == null || mailingControlNo.length() == 0) throw new IllegalArgumentException("The mailingControlNo argument is required");
        EntityManager em = Letter.entityManager();
        TypedQuery<Letter> q = em.createQuery("SELECT o FROM Letter AS o WHERE o.mailingControlNo = :mailingControlNo", Letter.class);
        q.setParameter("mailingControlNo", mailingControlNo);
        return q;
    }
    
    public static TypedQuery<Letter> Letter.findLettersByRpoType(RPOType rpoType) {
        if (rpoType == null) throw new IllegalArgumentException("The rpoType argument is required");
        EntityManager em = Letter.entityManager();
        TypedQuery<Letter> q = em.createQuery("SELECT o FROM Letter AS o WHERE o.rpoType = :rpoType", Letter.class);
        q.setParameter("rpoType", rpoType);
        return q;
    }
    
    public static TypedQuery<Letter> Letter.findLettersByRpoTypeAndClaimant(RPOType rpoType, Claimant claimant) {
        if (rpoType == null) throw new IllegalArgumentException("The rpoType argument is required");
        if (claimant == null) throw new IllegalArgumentException("The claimant argument is required");
        EntityManager em = Letter.entityManager();
        TypedQuery<Letter> q = em.createQuery("SELECT o FROM Letter AS o WHERE o.rpoType = :rpoType AND o.claimant = :claimant", Letter.class);
        q.setParameter("rpoType", rpoType);
        q.setParameter("claimant", claimant);
        return q;
    }
    
}
