// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.Claimant;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Claimant_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "entityManagerFactory")
    transient EntityManager Claimant.entityManager;
    
    public static final EntityManager Claimant.entityManager() {
        EntityManager em = new Claimant().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Claimant.countClaimants() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Claimant o", Long.class).getSingleResult();
    }
    
    public static List<Claimant> Claimant.findAllClaimants() {
        return entityManager().createQuery("SELECT o FROM Claimant o", Claimant.class).getResultList();
    }
    
    public static Claimant Claimant.findClaimant(Long id) {
        if (id == null) return null;
        return entityManager().find(Claimant.class, id);
    }
    
    public static List<Claimant> Claimant.findClaimantEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Claimant o", Claimant.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Claimant.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Claimant.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Claimant attached = Claimant.findClaimant(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Claimant.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Claimant.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Claimant Claimant.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Claimant merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
