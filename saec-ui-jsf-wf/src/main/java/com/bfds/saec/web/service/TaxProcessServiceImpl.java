/*
 * (c) Copyright 2005-2011 JAXIO - Generated by Celerio, a Jaxio tool. http://www.jaxio.com
 */
package com.bfds.saec.web.service;

import java.util.Collection;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.bfds.saec.batch.file.domain.out.damasco_domestic.OutboundDomesticTaxRec;
import com.bfds.saec.batch.file.domain.out.damasco_domestic.TaxProcessDao;
import com.bfds.saec.dao.PaymentDao;
import com.bfds.saec.domain.Claimant;
import com.bfds.saec.domain.Payment;
import com.bfds.saec.domain.activity.Activity;
import com.bfds.saec.domain.activity.ActivityCode;
import com.bfds.saec.domain.util.PaymentCodeUtil;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

@Service("taxProcessService")
public class TaxProcessServiceImpl implements TaxProcessService {

	private static final long serialVersionUID = 1L;
	
	final static Logger log = LoggerFactory
			.getLogger(TaxProcessServiceImpl.class);

	private static final String ACTIVITY_TYPE_DESC = "Tax Processing";


    @PersistenceContext(unitName = "batchFilesEntityManagerFactory")
    EntityManager batchFilesEntityManager;

	@Autowired
	transient protected PaymentDao paymenetDao;

	@Autowired
	transient protected TaxProcessDao taxProcessDao;

	@Override
	public List<Payment> getOutboundDomesticTaxPayments(final Long claimantId) {
		return this.paymenetDao.getPaymentsByClaimantIdAndStatus(claimantId,
				PaymentCodeUtil.PAYMENTS_ELIGIBLE_FOR_DAMASCO_PROCESSING);
	}

	@Override
	public List<OutboundDomesticTaxRec> getAllUnProcessedOutboundDomesticTaxRec() {
		return taxProcessDao.getAllDamascoOutRecs(Boolean.FALSE, true);
	}

	@Override
	@Transactional(value = "batchFilesTransactionManager", propagation = Propagation.REQUIRES_NEW)
	public boolean saveOutboundDomesticTaxRec(
			final OutboundDomesticTaxRec outboundDomesticTaxRec) {
        batchFilesEntityManager.persist(outboundDomesticTaxRec);
		if(log.isInfoEnabled()){
			log.info(String.format("OutboundDomesticTaxRec having Check#%s is saved.",outboundDomesticTaxRec.getCheckNumber()));
		}
		return true;
	}

	@Override
	@Transactional(value = "batchFilesTransactionManager", propagation = Propagation.REQUIRES_NEW)
	public boolean updateOutboundDomesticTaxRec(
			final OutboundDomesticTaxRec outboundDomesticTaxRec) {
        batchFilesEntityManager.merge(outboundDomesticTaxRec);
		if(log.isInfoEnabled()){
			log.info(String.format("OutboundDomesticTaxRec having Check#%s is updated.",outboundDomesticTaxRec.getCheckNumber()));
		}
		return true;
	}

	@Override
	@Transactional(value = "transactionManager", propagation = Propagation.REQUIRES_NEW)
	public boolean addActivityForOutboundDomesticTaxRec(
			final OutboundDomesticTaxRec outboundDomesticTaxRec,
			ActivityCode activityCode) {
		Activity activity = new Activity();
		activity.setActivityDate(new Date());
		activity.setDescription("Check "
				+ outboundDomesticTaxRec.getCheckNumber() + " Payment Amount "
				+ outboundDomesticTaxRec.getTotalPaymentAmount() + " is "
				+ activityCode + " for Tax Processing");

		activity.setClaimant(Claimant.findClaimant(outboundDomesticTaxRec
				.getReferenceNo()));
		activity.setActivityCode(activityCode);
		activity.setActivityTypeDescription(ACTIVITY_TYPE_DESC);
		activity.persist();
		if(log.isInfoEnabled()){
			log.info(String.format("New Activity generated for OutboundDomesticTaxRec having Check#%s with ActivityCode:%s",outboundDomesticTaxRec.getCheckNumber(), activityCode));
		}
		return true;
	}

    @Override
    @Transactional(value = "batchFilesTransactionManager", propagation = Propagation.REQUIRES_NEW)
    public void deleteAll(Collection<OutboundDomesticTaxRec> values) {
        for (OutboundDomesticTaxRec rec : values) {
            batchFilesEntityManager.remove(rec);
        }
    }

}