// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.ProcessError;
import com.bfds.saec.domain.ProcessError.ErrorSeverity;
import com.bfds.saec.domain.ProcessError.ErrorType;
import com.bfds.saec.domain.ProcessErrorDataOnDemand;
import com.bfds.saec.domain.reference.ProcessName;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ProcessErrorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProcessErrorDataOnDemand: @Component;
    
    private Random ProcessErrorDataOnDemand.rnd = new SecureRandom();
    
    private List<ProcessError> ProcessErrorDataOnDemand.data;
    
    public ProcessError ProcessErrorDataOnDemand.getNewTransientProcessError(int index) {
        ProcessError obj = new ProcessError();
        setDate(obj, index);
        setErrorId(obj, index);
        setErrorType(obj, index);
        setException(obj, index);
        setIsBatch(obj, index);
        setMessage(obj, index);
        setProcessName(obj, index);
        setReferenceNo(obj, index);
        setSeverity(obj, index);
        return obj;
    }
    
    public void ProcessErrorDataOnDemand.setDate(ProcessError obj, int index) {
        Date date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDate(date);
    }
    
    public void ProcessErrorDataOnDemand.setErrorId(ProcessError obj, int index) {
        Long errorId = new Integer(index).longValue();
        obj.setErrorId(errorId);
    }
    
    public void ProcessErrorDataOnDemand.setErrorType(ProcessError obj, int index) {
        ErrorType errorType = ErrorType.class.getEnumConstants()[0];
        obj.setErrorType(errorType);
    }
    
    public void ProcessErrorDataOnDemand.setException(ProcessError obj, int index) {
        String exception = "exception_" + index;
        obj.setException(exception);
    }
    
    public void ProcessErrorDataOnDemand.setIsBatch(ProcessError obj, int index) {
        Boolean isBatch = true;
        obj.setIsBatch(isBatch);
    }
    
    public void ProcessErrorDataOnDemand.setMessage(ProcessError obj, int index) {
        String message = "message_" + index;
        obj.setMessage(message);
    }
    
    public void ProcessErrorDataOnDemand.setProcessName(ProcessError obj, int index) {
        ProcessName processName = ProcessName.class.getEnumConstants()[0];
        obj.setProcessName(processName);
    }
    
    public void ProcessErrorDataOnDemand.setReferenceNo(ProcessError obj, int index) {
        String referenceNo = "referenceNo_" + index;
        obj.setReferenceNo(referenceNo);
    }
    
    public void ProcessErrorDataOnDemand.setSeverity(ProcessError obj, int index) {
        ErrorSeverity severity = ErrorSeverity.class.getEnumConstants()[0];
        obj.setSeverity(severity);
    }
    
    public ProcessError ProcessErrorDataOnDemand.getSpecificProcessError(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProcessError obj = data.get(index);
        Long id = obj.getId();
        return ProcessError.findProcessError(id);
    }
    
    public ProcessError ProcessErrorDataOnDemand.getRandomProcessError() {
        init();
        ProcessError obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ProcessError.findProcessError(id);
    }
    
    public boolean ProcessErrorDataOnDemand.modifyProcessError(ProcessError obj) {
        return false;
    }
    
    public void ProcessErrorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProcessError.findProcessErrorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProcessError' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProcessError>();
        for (int i = 0; i < 10; i++) {
            ProcessError obj = getNewTransientProcessError(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
