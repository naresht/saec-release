// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain;

import com.bfds.saec.domain.Claimant;
import com.bfds.saec.domain.ClaimantDataOnDemand;
import com.bfds.saec.domain.ClaimantEmploymentHistory;
import com.bfds.saec.domain.ClaimantRegistration;
import com.bfds.saec.domain.ClaimantTaxInfo;
import com.bfds.saec.domain.ContactDataOnDemand;
import com.bfds.saec.domain.HoldCode;
import com.bfds.saec.rip.service.RipEventListener;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ClaimantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ClaimantDataOnDemand: @Component;
    
    private Random ClaimantDataOnDemand.rnd = new SecureRandom();
    
    private List<Claimant> ClaimantDataOnDemand.data;
    
    @Autowired
    private ContactDataOnDemand ClaimantDataOnDemand.contactDataOnDemand;
    
    public void ClaimantDataOnDemand.setTaxInfo(Claimant obj, int index) {
        ClaimantTaxInfo embeddedClass = new ClaimantTaxInfo();
        setTaxInfoSsn(embeddedClass, index);
        setTaxInfoEin(embeddedClass, index);
        setTaxInfoTin(embeddedClass, index);
        setTaxInfoCertificationStatus(embeddedClass, index);
        setTaxInfoCertificationType(embeddedClass, index);
        setTaxInfoTaxCountryCode(embeddedClass, index);
        setTaxInfoUsCitizen(embeddedClass, index);
        setTaxInfoCertificationDate(embeddedClass, index);
        setTaxInfoForeignTax(embeddedClass, index);
        setTaxInfoForeignTaxClassification(embeddedClass, index);
        setTaxInfoDateSolicitationReceived(embeddedClass, index);
        obj.setTaxInfo(embeddedClass);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoSsn(ClaimantTaxInfo obj, int index) {
        String ssn = "ssn_" + index;
        obj.setSsn(ssn);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoEin(ClaimantTaxInfo obj, int index) {
        String ein = "ein_" + index;
        obj.setEin(ein);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoTin(ClaimantTaxInfo obj, int index) {
        String tin = "tin_" + index;
        obj.setTin(tin);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoCertificationStatus(ClaimantTaxInfo obj, int index) {
        String certificationStatus = "certificationStatus_" + index;
        obj.setCertificationStatus(certificationStatus);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoCertificationType(ClaimantTaxInfo obj, int index) {
        String certificationType = "certificationType_" + index;
        obj.setCertificationType(certificationType);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoTaxCountryCode(ClaimantTaxInfo obj, int index) {
        String taxCountryCode = "taxCountryCode_" + index;
        obj.setTaxCountryCode(taxCountryCode);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoUsCitizen(ClaimantTaxInfo obj, int index) {
        Boolean usCitizen = Boolean.TRUE;
        obj.setUsCitizen(usCitizen);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoCertificationDate(ClaimantTaxInfo obj, int index) {
        Date certificationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCertificationDate(certificationDate);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoForeignTax(ClaimantTaxInfo obj, int index) {
        Boolean foreignTax = Boolean.TRUE;
        obj.setForeignTax(foreignTax);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoForeignTaxClassification(ClaimantTaxInfo obj, int index) {
        String foreignTaxClassification = "foreignTaxClassification_" + index;
        obj.setForeignTaxClassification(foreignTaxClassification);
    }
    
    public void ClaimantDataOnDemand.setTaxInfoDateSolicitationReceived(ClaimantTaxInfo obj, int index) {
        Date dateSolicitationReceived = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateSolicitationReceived(dateSolicitationReceived);
    }
    
    public void ClaimantDataOnDemand.setEmploymentHistory(Claimant obj, int index) {
        ClaimantEmploymentHistory embeddedClass = new ClaimantEmploymentHistory();
        setEmploymentHistoryServiceStartDate1(embeddedClass, index);
        setEmploymentHistoryServiceEndDate1(embeddedClass, index);
        setEmploymentHistoryServiceStartDate2(embeddedClass, index);
        setEmploymentHistoryServiceEndDate2(embeddedClass, index);
        obj.setEmploymentHistory(embeddedClass);
    }
    
    public void ClaimantDataOnDemand.setEmploymentHistoryServiceStartDate1(ClaimantEmploymentHistory obj, int index) {
        Date serviceStartDate1 = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setServiceStartDate1(serviceStartDate1);
    }
    
    public void ClaimantDataOnDemand.setEmploymentHistoryServiceEndDate1(ClaimantEmploymentHistory obj, int index) {
        Date serviceEndDate1 = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setServiceEndDate1(serviceEndDate1);
    }
    
    public void ClaimantDataOnDemand.setEmploymentHistoryServiceStartDate2(ClaimantEmploymentHistory obj, int index) {
        Date serviceStartDate2 = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setServiceStartDate2(serviceStartDate2);
    }
    
    public void ClaimantDataOnDemand.setEmploymentHistoryServiceEndDate2(ClaimantEmploymentHistory obj, int index) {
        Date serviceEndDate2 = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setServiceEndDate2(serviceEndDate2);
    }
    
    public void ClaimantDataOnDemand.setAccountStatus(Claimant obj, int index) {
        String accountStatus = "accountStatus_" + index;
        obj.setAccountStatus(accountStatus);
    }
    
    public void ClaimantDataOnDemand.setAccountType(Claimant obj, int index) {
        String accountType = "accountType_" + index;
        obj.setAccountType(accountType);
    }
    
    public void ClaimantDataOnDemand.setAccountTypeOtherDescription(Claimant obj, int index) {
        String accountTypeOtherDescription = "accountTypeOtherDescription_" + index;
        obj.setAccountTypeOtherDescription(accountTypeOtherDescription);
    }
    
    public void ClaimantDataOnDemand.setAddressResearchSent(Claimant obj, int index) {
        Boolean addressResearchSent = Boolean.TRUE;
        obj.setAddressResearchSent(addressResearchSent);
    }
    
    public void ClaimantDataOnDemand.setAddressResearchSentCount(Claimant obj, int index) {
        int addressResearchSentCount = index;
        obj.setAddressResearchSentCount(addressResearchSentCount);
    }
    
    public void ClaimantDataOnDemand.setAddressResearchSentCountForChecks(Claimant obj, int index) {
        int addressResearchSentCountForChecks = index;
        obj.setAddressResearchSentCountForChecks(addressResearchSentCountForChecks);
    }
    
    public void ClaimantDataOnDemand.setAddressResearchSentCountForLetters(Claimant obj, int index) {
        int addressResearchSentCountForLetters = index;
        obj.setAddressResearchSentCountForLetters(addressResearchSentCountForLetters);
    }
    
    public void ClaimantDataOnDemand.setAddressResearchSentCountForLettersAndChecks(Claimant obj, int index) {
        int addressResearchSentCountForLettersAndChecks = index;
        obj.setAddressResearchSentCountForLettersAndChecks(addressResearchSentCountForLettersAndChecks);
    }
    
    public void ClaimantDataOnDemand.setAlternatePayeeResonCode(Claimant obj, int index) {
        String alternatePayeeResonCode = "alternatePayeeResonCode_" + index;
        obj.setAlternatePayeeResonCode(alternatePayeeResonCode);
    }
    
    public void ClaimantDataOnDemand.setBin(Claimant obj, int index) {
        String bin = "bin_" + index;
        obj.setBin(bin);
    }
    
    public void ClaimantDataOnDemand.setBrokerId(Claimant obj, int index) {
        String brokerId = "brokerId_" + index;
        obj.setBrokerId(brokerId);
    }
    
    public void ClaimantDataOnDemand.setClaimantRegistration(Claimant obj, int index) {
        ClaimantRegistration claimantRegistration = null;
        obj.setClaimantRegistration(claimantRegistration);
    }
    
    public void ClaimantDataOnDemand.setCorporate(Claimant obj, int index) {
        Boolean corporate = Boolean.FALSE;
        obj.setCorporate(corporate);
    }
    
    public void ClaimantDataOnDemand.setCreatedBy(Claimant obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void ClaimantDataOnDemand.setCreatedDate(Claimant obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void ClaimantDataOnDemand.setDoAudit(Claimant obj, int index) {
        Boolean doAudit = Boolean.TRUE;
        obj.setDoAudit(doAudit);
    }
    
    public void ClaimantDataOnDemand.setFundAccountNo(Claimant obj, int index) {
        String fundAccountNo = "fundAccountNo_" + index;
        obj.setFundAccountNo(fundAccountNo);
    }
    
    public void ClaimantDataOnDemand.setHoldCode(Claimant obj, int index) {
        HoldCode holdCode = null;
        obj.setHoldCode(holdCode);
    }
    
    public void ClaimantDataOnDemand.setIneligibilityReason(Claimant obj, int index) {
        String ineligibilityReason = "ineligibilityReason_" + index;
        obj.setIneligibilityReason(ineligibilityReason);
    }
    
    public void ClaimantDataOnDemand.setIsSendCountLimit(Claimant obj, int index) {
        Boolean isSendCountLimit = false;
        obj.setIsSendCountLimit(isSendCountLimit);
    }
    
    public void ClaimantDataOnDemand.setMarketTimer(Claimant obj, int index) {
        Boolean marketTimer = Boolean.TRUE;
        obj.setMarketTimer(marketTimer);
    }
    
    public void ClaimantDataOnDemand.setNotEligibleForPayment(Claimant obj, int index) {
        Boolean notEligibleForPayment = Boolean.TRUE;
        obj.setNotEligibleForPayment(notEligibleForPayment);
    }
    
    public void ClaimantDataOnDemand.setOmniBus(Claimant obj, int index) {
        Boolean omniBus = Boolean.TRUE;
        obj.setOmniBus(omniBus);
    }
    
    public void ClaimantDataOnDemand.setOrganization(Claimant obj, int index) {
        Boolean organization = Boolean.TRUE;
        obj.setOrganization(organization);
    }
    
    public void ClaimantDataOnDemand.setParentClaimant(Claimant obj, int index) {
        Claimant parentClaimant = obj;
        obj.setParentClaimant(parentClaimant);
    }
    
    public void ClaimantDataOnDemand.setReferenceNo(Claimant obj, int index) {
        String referenceNo = "referenceNo_" + index;
        obj.setReferenceNo(referenceNo);
    }
    
    public void ClaimantDataOnDemand.setRipEventListener(Claimant obj, int index) {
        RipEventListener ripEventListener = null;
        obj.setRipEventListener(ripEventListener);
    }
    
    public void ClaimantDataOnDemand.setSpecialPull(Claimant obj, int index) {
        String specialPull = "specialPull_" + index;
        obj.setSpecialPull(specialPull);
    }
    
    public Claimant ClaimantDataOnDemand.getSpecificClaimant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Claimant obj = data.get(index);
        Long id = obj.getId();
        return Claimant.findClaimant(id);
    }
    
    public Claimant ClaimantDataOnDemand.getRandomClaimant() {
        init();
        Claimant obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Claimant.findClaimant(id);
    }
    
    public boolean ClaimantDataOnDemand.modifyClaimant(Claimant obj) {
        return false;
    }
    
    public void ClaimantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Claimant.findClaimantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Claimant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Claimant>();
        for (int i = 0; i < 10; i++) {
            Claimant obj = getNewTransientClaimant(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
