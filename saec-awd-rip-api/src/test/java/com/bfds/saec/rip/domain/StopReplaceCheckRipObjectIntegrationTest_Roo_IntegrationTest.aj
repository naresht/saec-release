// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.rip.domain;

import com.bfds.saec.rip.domain.StopReplaceCheckRipObject;
import com.bfds.saec.rip.domain.StopReplaceCheckRipObjectDataOnDemand;
import com.bfds.saec.rip.domain.StopReplaceCheckRipObjectIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect StopReplaceCheckRipObjectIntegrationTest_Roo_IntegrationTest {
    
    declare @type: StopReplaceCheckRipObjectIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: StopReplaceCheckRipObjectIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: StopReplaceCheckRipObjectIntegrationTest: @Transactional;
    
    @Autowired
    private StopReplaceCheckRipObjectDataOnDemand StopReplaceCheckRipObjectIntegrationTest.dod;
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testCountStopReplaceCheckRipObjects() {
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", dod.getRandomStopReplaceCheckRipObject());
        long count = StopReplaceCheckRipObject.countStopReplaceCheckRipObjects();
        Assert.assertTrue("Counter for 'StopReplaceCheckRipObject' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testFindStopReplaceCheckRipObject() {
        StopReplaceCheckRipObject obj = dod.getRandomStopReplaceCheckRipObject();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to provide an identifier", id);
        obj = StopReplaceCheckRipObject.findStopReplaceCheckRipObject(id);
        Assert.assertNotNull("Find method for 'StopReplaceCheckRipObject' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'StopReplaceCheckRipObject' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testFindAllStopReplaceCheckRipObjects() {
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", dod.getRandomStopReplaceCheckRipObject());
        long count = StopReplaceCheckRipObject.countStopReplaceCheckRipObjects();
        Assert.assertTrue("Too expensive to perform a find all test for 'StopReplaceCheckRipObject', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<StopReplaceCheckRipObject> result = StopReplaceCheckRipObject.findAllStopReplaceCheckRipObjects();
        Assert.assertNotNull("Find all method for 'StopReplaceCheckRipObject' illegally returned null", result);
        Assert.assertTrue("Find all method for 'StopReplaceCheckRipObject' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testFindStopReplaceCheckRipObjectEntries() {
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", dod.getRandomStopReplaceCheckRipObject());
        long count = StopReplaceCheckRipObject.countStopReplaceCheckRipObjects();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<StopReplaceCheckRipObject> result = StopReplaceCheckRipObject.findStopReplaceCheckRipObjectEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'StopReplaceCheckRipObject' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'StopReplaceCheckRipObject' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testFlush() {
        StopReplaceCheckRipObject obj = dod.getRandomStopReplaceCheckRipObject();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to provide an identifier", id);
        obj = StopReplaceCheckRipObject.findStopReplaceCheckRipObject(id);
        Assert.assertNotNull("Find method for 'StopReplaceCheckRipObject' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyStopReplaceCheckRipObject(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'StopReplaceCheckRipObject' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testMergeUpdate() {
        StopReplaceCheckRipObject obj = dod.getRandomStopReplaceCheckRipObject();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to provide an identifier", id);
        obj = StopReplaceCheckRipObject.findStopReplaceCheckRipObject(id);
        boolean modified =  dod.modifyStopReplaceCheckRipObject(obj);
        Integer currentVersion = obj.getVersion();
        StopReplaceCheckRipObject merged = (StopReplaceCheckRipObject)obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'StopReplaceCheckRipObject' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", dod.getRandomStopReplaceCheckRipObject());
        StopReplaceCheckRipObject obj = dod.getNewTransientStopReplaceCheckRipObject(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'StopReplaceCheckRipObject' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'StopReplaceCheckRipObject' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void StopReplaceCheckRipObjectIntegrationTest.testRemove() {
        StopReplaceCheckRipObject obj = dod.getRandomStopReplaceCheckRipObject();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'StopReplaceCheckRipObject' failed to provide an identifier", id);
        obj = StopReplaceCheckRipObject.findStopReplaceCheckRipObject(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'StopReplaceCheckRipObject' with identifier '" + id + "'", StopReplaceCheckRipObject.findStopReplaceCheckRipObject(id));
    }
    
}
