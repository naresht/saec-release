// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfds.saec.domain.activity;

import com.bfds.saec.domain.Claimant;
import com.bfds.saec.domain.PaymentDataOnDemand;
import com.bfds.saec.domain.activity.ActivityCode;
import com.bfds.saec.domain.activity.CheckActivity;
import com.bfds.saec.domain.activity.CheckActivityDataOnDemand;
import com.bfds.saec.domain.reference.PaymentCode;
import com.bfds.saec.domain.reference.PaymentType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CheckActivityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CheckActivityDataOnDemand: @Component;
    
    private Random CheckActivityDataOnDemand.rnd = new SecureRandom();
    
    private List<CheckActivity> CheckActivityDataOnDemand.data;
    
    @Autowired
    private PaymentDataOnDemand CheckActivityDataOnDemand.paymentDataOnDemand;
    
    public CheckActivity CheckActivityDataOnDemand.getNewTransientCheckActivity(int index) {
        CheckActivity obj = new CheckActivity();
        setActivityCode(obj, index);
        setActivityDate(obj, index);
        setActivityTypeDescription(obj, index);
        setClaimant(obj, index);
        setComments(obj, index);
        setDescription(obj, index);
        setFromPaymentCode(obj, index);
        setFromPaymentType(obj, index);
        setIdentificationNo(obj, index);
        setToPaymentCode(obj, index);
        setToPaymentType(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void CheckActivityDataOnDemand.setActivityCode(CheckActivity obj, int index) {
        ActivityCode activityCode = null;
        obj.setActivityCode(activityCode);
    }
    
    public void CheckActivityDataOnDemand.setActivityDate(CheckActivity obj, int index) {
        Date activityDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setActivityDate(activityDate);
    }
    
    public void CheckActivityDataOnDemand.setActivityTypeDescription(CheckActivity obj, int index) {
        String activityTypeDescription = "activityTypeDescription_" + index;
        obj.setActivityTypeDescription(activityTypeDescription);
    }
    
    public void CheckActivityDataOnDemand.setClaimant(CheckActivity obj, int index) {
        Claimant claimant = null;
        obj.setClaimant(claimant);
    }
    
    public void CheckActivityDataOnDemand.setComments(CheckActivity obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void CheckActivityDataOnDemand.setDescription(CheckActivity obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void CheckActivityDataOnDemand.setFromPaymentCode(CheckActivity obj, int index) {
        PaymentCode fromPaymentCode = null;
        obj.setFromPaymentCode(fromPaymentCode);
    }
    
    public void CheckActivityDataOnDemand.setFromPaymentType(CheckActivity obj, int index) {
        PaymentType fromPaymentType = null;
        obj.setFromPaymentType(fromPaymentType);
    }
    
    public void CheckActivityDataOnDemand.setIdentificationNo(CheckActivity obj, int index) {
        String identificationNo = "identificationNo_" + index;
        obj.setIdentificationNo(identificationNo);
    }
    
    public void CheckActivityDataOnDemand.setToPaymentCode(CheckActivity obj, int index) {
        PaymentCode toPaymentCode = null;
        obj.setToPaymentCode(toPaymentCode);
    }
    
    public void CheckActivityDataOnDemand.setToPaymentType(CheckActivity obj, int index) {
        PaymentType toPaymentType = null;
        obj.setToPaymentType(toPaymentType);
    }
    
    public void CheckActivityDataOnDemand.setUserId(CheckActivity obj, int index) {
        String userId = "userId_" + index;
        obj.setUserId(userId);
    }
    
    public CheckActivity CheckActivityDataOnDemand.getSpecificCheckActivity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CheckActivity obj = data.get(index);
        Long id = obj.getId();
        return CheckActivity.findCheckActivity(id);
    }
    
    public CheckActivity CheckActivityDataOnDemand.getRandomCheckActivity() {
        init();
        CheckActivity obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return CheckActivity.findCheckActivity(id);
    }
    
    public boolean CheckActivityDataOnDemand.modifyCheckActivity(CheckActivity obj) {
        return false;
    }
    
    public void CheckActivityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = CheckActivity.findCheckActivityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CheckActivity' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CheckActivity>();
        for (int i = 0; i < 10; i++) {
            CheckActivity obj = getNewTransientCheckActivity(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
